name: CI

on:
  push:
    branches:
      - '*'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          target: wasm32-wasi
      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: cargo fmt
        run: cargo fmt -- --check
      - name: cargo clippy
        run: cargo clippy -- -D clippy::all

      - name: cargo build
        run: cargo build --target wasm32-wasi --release

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: wasi
          path: target/wasm32-wasi/release/wc-compiler.wasm
          if-no-files-found: error
          retention-days: '2'

  release:
    needs:
      - build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create
        id: create
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("node:fs/promises");

            const name = context.ref.replace(/^refs\/tags\//, '');
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: name,
              draft: true,
              generate_release_notes: true,
            });
            await github.request({
              method: "POST",
              url: release.data.upload_url,
              headers: {
                "content-type": "application/wasm",
              },
              data: await fs.readFile("artifacts/wasi/wc-compiler.wasm"),
              name: "wc-compiler.wasm",
            });
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              draft: false,
              make_latest: true,
            });
